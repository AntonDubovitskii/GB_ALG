"""
Задание 2.
Попытайтесь выполнить профилирование памяти в любом скрипте с рекурсией.
Вам нужно обнаружить проблему в процессе этого. Но проблема связана не с тем,
что рекурсия потребляет много памяти, а с самим процессом замеров.
Опищите эту проблему и найдите простой путь ее решения.
Опишите этот путь и покажите его применение
"""

from memory_profiler import profile

"""
Взята функция number_flip() из упражнения 3, ДЗ-2, текущего курса.
Функция формирует из введенного числа обратное по порядку и выводит на экран.
"""


@profile
def wrapper(w_number):
    def number_flip(number):
        integer_part, remainder = divmod(number, 10)

        if integer_part == 0:
            return str(remainder)
        else:
            return str(remainder) + str(number_flip(integer_part))
    return number_flip(w_number)


number = int(input('Введите число, которое требуется перевернуть: \n'))
print(wrapper(number))

"""
При попытке профилирования рекурсивной функции, происходит срабатывание декоратора @profile столько раз, сколько 
вызывается функция - один раз при первом вызове функции и каждый раз, когда функция вызывает сама себя через рекурсию.
Это не дает никакой дополнительной информации и просто засоряет вывод, особенно если глубина рекурсии достаточно
велика. Чтобы этого избежать - достаточно просто размечать декоратор @profile не на саму функцию, а на отдельную
обертку, которая запустится всего один раз, передав результаты функции на профилирование.
"""