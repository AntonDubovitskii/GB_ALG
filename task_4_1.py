"""
Задание 1.
Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива
Сделайте замеры времени выполнения кода с помощью модуля timeit
Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры
ОБЯЗАТЕЛЬНО! Добавьте аналитику: что вы сделали и какой это принесло эффект
"""

from timeit import timeit


def func_1(nums):
    """
    Итератор с функцией append()
    """
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    """
    List comprehension
    """
    return [i for i in nums if i % 2 == 0]


def func_3(nums):
    """
    Лямбда выражение и функция filter()
    """
    new_arr = list(filter(lambda x: (x % 2 == 0), nums))
    return new_arr


nums = [el for el in range(1000)]

print(f'Результат замера алгоритма, использующего итератор, с функцией append: ')
print(timeit("func_1(nums[:])", globals=globals(), number=100000))   # 3.4118354000002

print(f'\nРезультат замера алгоритма, использующего list comprehension : ')
print(timeit("func_2(nums[:])", globals=globals(), number=100000))   # 2.040951300001325

print(f'\nРезультат замера алгоритма, использующего лямбда выражение и функцию filter: ')
print(timeit("func_3(nums[:])", globals=globals(), number=100000))   # 3.525272799999584

"""
Вывод:

Наиболее эффективным алгоритмом оказался тот, что использует list comprehension. Таким образом удается избежать затрат
ресурсов на создание и заполнение нового списка. Данный алгоритм является оптимальным для решения данной задачи, при 
количестве повторов равному 100000, выигрыш в скорости составил приблизительно 60%

Вариант с функцией filter() и лямбда выражением оказался медленнее традиционного способа.
"""

